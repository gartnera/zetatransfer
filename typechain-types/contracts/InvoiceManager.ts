/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type ZContextStruct = {
  origin: PromiseOrValue<BytesLike>;
  sender: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type ZContextStructOutput = [string, string, BigNumber] & {
  origin: string;
  sender: string;
  chainID: BigNumber;
};

export declare namespace InvoiceManager {
  export type InvoiceStruct = {
    id: PromiseOrValue<BigNumberish>;
    creator: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    priceUSD: PromiseOrValue<BigNumberish>;
    paid: PromiseOrValue<boolean>;
  };

  export type InvoiceStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    creator: string;
    description: string;
    priceUSD: BigNumber;
    paid: boolean;
  };
}

export interface InvoiceManagerInterface extends utils.Interface {
  functions: {
    "createInvoice(string,uint256)": FunctionFragment;
    "getInvoice(uint256)": FunctionFragment;
    "getInvoices()": FunctionFragment;
    "getInvoicesByCreator(address)": FunctionFragment;
    "getMyInvoices()": FunctionFragment;
    "invoices(uint256)": FunctionFragment;
    "invoicesByCreator(address,uint256)": FunctionFragment;
    "nextInvoiceId()": FunctionFragment;
    "onCrossChainCall((bytes,address,uint256),address,uint256,bytes)": FunctionFragment;
    "systemContract()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createInvoice"
      | "getInvoice"
      | "getInvoices"
      | "getInvoicesByCreator"
      | "getMyInvoices"
      | "invoices"
      | "invoicesByCreator"
      | "nextInvoiceId"
      | "onCrossChainCall"
      | "systemContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createInvoice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoicesByCreator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyInvoices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invoices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "invoicesByCreator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextInvoiceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onCrossChainCall",
    values: [
      ZContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "systemContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInvoice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoicesByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invoices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invoicesByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextInvoiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCrossChainCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemContract",
    data: BytesLike
  ): Result;

  events: {
    "InvoiceCreated(uint256,address,string,uint256)": EventFragment;
    "InvoicePaid(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InvoiceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvoicePaid"): EventFragment;
}

export interface InvoiceCreatedEventObject {
  id: BigNumber;
  creator: string;
  description: string;
  priceUSD: BigNumber;
}
export type InvoiceCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  InvoiceCreatedEventObject
>;

export type InvoiceCreatedEventFilter = TypedEventFilter<InvoiceCreatedEvent>;

export interface InvoicePaidEventObject {
  id: BigNumber;
  payer: string;
}
export type InvoicePaidEvent = TypedEvent<
  [BigNumber, string],
  InvoicePaidEventObject
>;

export type InvoicePaidEventFilter = TypedEventFilter<InvoicePaidEvent>;

export interface InvoiceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InvoiceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createInvoice(
      _description: PromiseOrValue<string>,
      _priceUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInvoice(
      _invoiceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[InvoiceManager.InvoiceStructOutput]>;

    getInvoices(
      overrides?: CallOverrides
    ): Promise<[InvoiceManager.InvoiceStructOutput[]]>;

    getInvoicesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[InvoiceManager.InvoiceStructOutput[]]>;

    getMyInvoices(
      overrides?: CallOverrides
    ): Promise<[InvoiceManager.InvoiceStructOutput[]]>;

    invoices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean] & {
        id: BigNumber;
        creator: string;
        description: string;
        priceUSD: BigNumber;
        paid: boolean;
      }
    >;

    invoicesByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextInvoiceId(overrides?: CallOverrides): Promise<[BigNumber]>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    systemContract(overrides?: CallOverrides): Promise<[string]>;
  };

  createInvoice(
    _description: PromiseOrValue<string>,
    _priceUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInvoice(
    _invoiceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<InvoiceManager.InvoiceStructOutput>;

  getInvoices(
    overrides?: CallOverrides
  ): Promise<InvoiceManager.InvoiceStructOutput[]>;

  getInvoicesByCreator(
    _creator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<InvoiceManager.InvoiceStructOutput[]>;

  getMyInvoices(
    overrides?: CallOverrides
  ): Promise<InvoiceManager.InvoiceStructOutput[]>;

  invoices(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, boolean] & {
      id: BigNumber;
      creator: string;
      description: string;
      priceUSD: BigNumber;
      paid: boolean;
    }
  >;

  invoicesByCreator(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextInvoiceId(overrides?: CallOverrides): Promise<BigNumber>;

  onCrossChainCall(
    context: ZContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  systemContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createInvoice(
      _description: PromiseOrValue<string>,
      _priceUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getInvoice(
      _invoiceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<InvoiceManager.InvoiceStructOutput>;

    getInvoices(
      overrides?: CallOverrides
    ): Promise<InvoiceManager.InvoiceStructOutput[]>;

    getInvoicesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<InvoiceManager.InvoiceStructOutput[]>;

    getMyInvoices(
      overrides?: CallOverrides
    ): Promise<InvoiceManager.InvoiceStructOutput[]>;

    invoices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean] & {
        id: BigNumber;
        creator: string;
        description: string;
        priceUSD: BigNumber;
        paid: boolean;
      }
    >;

    invoicesByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextInvoiceId(overrides?: CallOverrides): Promise<BigNumber>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    systemContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "InvoiceCreated(uint256,address,string,uint256)"(
      id?: null,
      creator?: null,
      description?: null,
      priceUSD?: null
    ): InvoiceCreatedEventFilter;
    InvoiceCreated(
      id?: null,
      creator?: null,
      description?: null,
      priceUSD?: null
    ): InvoiceCreatedEventFilter;

    "InvoicePaid(uint256,address)"(
      id?: null,
      payer?: null
    ): InvoicePaidEventFilter;
    InvoicePaid(id?: null, payer?: null): InvoicePaidEventFilter;
  };

  estimateGas: {
    createInvoice(
      _description: PromiseOrValue<string>,
      _priceUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInvoice(
      _invoiceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoices(overrides?: CallOverrides): Promise<BigNumber>;

    getInvoicesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyInvoices(overrides?: CallOverrides): Promise<BigNumber>;

    invoices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoicesByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextInvoiceId(overrides?: CallOverrides): Promise<BigNumber>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    systemContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createInvoice(
      _description: PromiseOrValue<string>,
      _priceUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInvoice(
      _invoiceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvoices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvoicesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyInvoices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invoices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoicesByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextInvoiceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onCrossChainCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    systemContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
